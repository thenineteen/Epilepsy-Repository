function Tout = epilepsyreport2table(out)
%%
%EPILEPSYREPORT2TABLE Process an array of epilepsy patient structures into
%   a Matlab table format for easy outputting.
%
%   This function is called by epilepsy_4_xml2xls. It is also highly
%   dependent on epilepsyxfa2xml, since that is the function where the
%   field structure used herein is defined.
%
%   Written by Gregory Scott (gregory.scott99@imperial.ac.uk)
% -------------------------------------------------------------------------
%% Create a table form of a patient in order to write it to an Excel file
% or do statistical analysis
Tout = table();
for i = 1:numel(out.patient)
    pt = out.patient(i);
    
    T = [
        table(... % <-- Demographics
        {pt.meta.inputFile},...
%         {pt.demographics.name}, ...
%         {pt.demographics.dateOfBirth}, ...
        {pt.demographics.identifier}, ...
        {pt.demographics.handedness}, ...
        {pt.demographics.age}, ...
        {pt.demographics.gender}, ...
        pt.demographics.genderProbability, ...
        'VariableNames', ...
        {'file',...
        'name', ...
        'dateOfBirth', ...
        'identifier', ...
        'handedness', ...
        'age', ...
        'gender', ...
        'genderProbability'}),...
        table(... % <-- Meeting details
        {pt.meeting.date}, ...
        {pt.consultant}, ...
        {pt.authors.preparedBy}, ...
        {pt.discussion.chair}, ...
        {pt.discussion.previouslyDiscussed}, ...
        {pt.meeting.attendees.count}, ...
        'VariableNames', ...
        {'meetingDate', ...
        'consultant', ...
        'preparedBy', ...
        'chair', ...
        'previouslyDiscussed', ...
        'attendeeCount'}),...
        table( ... % <-- Conclusion
        {pt.conclusion.outcome}, ...
        {pt.conclusion.zone.text}, ...
        {pt.conclusion.plan}, ...
        'VariableNames', ...
        {'conclusionOutcome', ...
        'conclusionZone', ...
        'conclusionPlan'}), ...
        table( ... % <-- Antecedents
        pt.antecedents.hadAbnormalPregnancy, ...
        pt.antecedents.hadAbnormalDelivery, ...
        pt.antecedents.hadFebrileConvulsions, ...
        pt.antecedents.hadChildhoodHeadInjury, ...
        pt.antecedents.hadChildhoodCNSInfections, ...
        pt.antecedents.hadDelayedMilestones, ...
        pt.antecedents.antecedentsCount, ...
        { pt.antecedents.antecedentsText }, ...
        'VariableNames', ...
        {'hadAbnormalPregnancy', ...
        'hadAbnormalDelivery', ...
        'hadFebrileConvulsions', ...
        'hadChildhoodHeadInjury', ...
        'hadChildhoodCNSInfections', ...
        'hadDelayedMilestones', ...
        'antecedentsCount', ...
        'antecedentsText', ...
        }), ...
        table({pt.clinicalDetails}, ... % <-- Clinical Details
        'VariableNames', {'clinicalDetails'}), ...
        table(... % <-- Background
        pt.background.hadInjuries, ...
        {pt.background.injuriesText}, ...
        pt.background.hadStatus, ...
        {pt.background.statusText}, ...
        {pt.background.pastMedicalHistory}, ...
        {pt.background.pastPsychiatricHistory}, ...
        {pt.background.familyHistory}, ...
        {pt.background.socialHistory}, ...
        'VariableNames', ...
        {'hadInjuries',...
        'injuriesText',...
        'hadStatus', ...
        'statusText', ...
        'pastMedicalHistory',...
        'pastPsychiatricHistory', ...
        'familyHistory', ...
        'socialHistory'}), ...
        table( ... % <-- Examination
        {pt.examination.generalExaminationStatus}, ...
        {pt.examination.generalExaminationText}, ...
        {pt.examination.neurologicalExaminationStatus}, ...
        {pt.examination.neurologicalExaminationText}, ...
        'VariableNames', ...
        {'generalExaminationStatus', ...
        'generalExaminationText', ...
        'neurologicalExaminationStatus', ...
        'neurologicalExaminationText'}),...
        table( ... % <-- Lateralisation
        {pt.investigations.fmri.lateralisation},...
        pt.investigations.fmri.lateralisationProbability, ...
        'VariableNames', ...
        {'fmriLateralisation', ...
        'fmriLateralisationProbability'}),...
        table( ... % <-- Investigations status
        {pt.investigations.eeg.status}, ...
        {pt.investigations.vt.status}, ...
        {pt.investigations.mri.status}, ...
        {pt.investigations.fmri.status}, ...
        {pt.investigations.fmriEeg.status}, ...
        {pt.investigations.fdgPet.status}, ...
        {pt.investigations.meg.status}, ...
        {pt.investigations.spect.status}, ...
        {pt.investigations.psychology.status}, ...
        {pt.investigations.psychiatry.status}, ...
        {pt.investigations.intracranials.status}, ...
        {pt.investigations.wada.status}, ...
        'VariableNames', ...
        {'eegStatus', ...
        'vtStatus', ...
        'mriStatus', ...
        'fmriStatus', ...
        'fmriEegStatus', ...
        'fdgPetStatus', ...
        'megStatus', ...
        'spectStatus', ...
        'psychologyStatus', ...
        'psychiatryStatus', ...
        'intracranialsStatus', ...
        'wadaStatus'}), ...
         table( ... % <-- Investigations details
        {pt.investigations.eeg.text}, ...
        {pt.investigations.vt.text}, ...
        {pt.investigations.mri.text}, ...
        {pt.investigations.fmri.text}, ...
        {pt.investigations.fmriEeg.text}, ...
        {pt.investigations.fdgPet.text}, ...
        {pt.investigations.meg.text}, ...
        {pt.investigations.spect.text}, ...
        {pt.investigations.psychology.text}, ...
        {pt.investigations.psychiatry.text}, ...
        {pt.investigations.intracranials.text}, ...
        {pt.investigations.wada.text}, ...
        'VariableNames', ...
        {'eegText', ...
        'vtText', ...
        'mriText', ...
        'fmriText', ...
        'fmriEegText', ...
        'fdgPetText', ...
        'megText', ...
        'spectText', ...
        'psychologyText', ...
        'psychiatryText', ...
        'intracranialsText', ...
        'wadaText'}), ...
        table(pt.drugs.all.count, ... % <-- Drug count and checklist
        pt.drugs.current.count, ...
        pt.drugs.previous.count, ...
        pt.drugs.all.checklistCount, ... % <-- Drug count and checklist
        pt.drugs.current.checklistCount, ...
        pt.drugs.previous.checklistCount, ...
        'VariableNames',...
        {'allDrugCount', ...
        'currentDrugCount', ...
        'previousDrugCount', ...
        'checklistAllDrugCount', ...
        'checklistCurrentDrugCount', ...
        'checklistPreviousDrugCount'}),...
        struct2table(pt.drugs.all.checklist, 'AsArray', true),...
        table( ... % <-- Events
        pt.events.count, ...
        pt.events.maxClassificationLength, ...
        'VariableNames', ...
        {'eventCount', ...
        'maxClassificationLength'}), ...
        struct2table(pt.events.checklist, 'AsArray', true), ...
        struct2table(pt.events.checklistArr, 'AsArray', true), ...
        table({pt.events.allText}, 'VariableNames', {'eventsAllText'})
        ];
    Tout = [ Tout; T]; %#ok<AGROW>
end
end